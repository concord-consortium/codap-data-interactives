{"version":3,"sources":["lib/CodapInterface.ts","lib/codap-helper.ts","types-and-constants.ts","utilities.tsx","store.ts","notification_manager.ts","collect-measures.tsx","index.tsx"],"names":["connection","connectionState","stats","countDiReq","countDiRplSuccess","countDiRplFail","countDiRplTimeout","countCodapReq","countCodapUnhandledReq","countCodapRplSuccess","countCodapRplFail","timeDiFirstReq","timeDiLastReq","timeCodapFirstReq","timeCodapLastReq","config","interactiveState","notificationSubscribers","matchResource","resourceName","resourceSpec","startsWith","notificationHandler","request","callback","action","resource","requestValues","values","returnMessage","success","Date","Array","isArray","handled","some","subscription","result","actionSpec","rtn","handler","ex","forEach","value","operation","codapInterface","init","iConfig","iCallback","this_","this","Promise","resolve","reject","updateFrameReq","name","title","version","dimensions","preventBringToFront","preventDataContextReorg","IframePhoneRpcEndpoint","window","parent","customInteractiveStateHandler","on","getInteractiveState","bind","sendRequest","then","resp","receivedFrame","savedState","updateInteractiveState","stateHandler","error","getConnectionState","getStats","getConfig","iInteractiveState","Object","assign","destroy","message","JSON","stringify","call","response","undefined","handleResponse","rs","os","as","args","prototype","slice","arguments","indexOf","shift","subscriber","push","parseResourceSelector","iResource","selectorRE","split","selector","resourceType","match","exec","test","type","_regeneratorRuntime","e","t","r","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","__await","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","kEmptyEntityInfo","id","initializePlugin","pluginName","iRestoreStateHandler","interfaceConfig","cannotClose","dataSetString","contextName","concat","getDatasetInfoWithFilter","_x","_getDatasetInfoWithFilter","apply","_asyncToGenerator","_callee","iFilter","tDatasetInfoArray","tContextListResult","tIndex","aValue","_context","reason","console","log","getAllDatasetNames","_getAllDatasetNames","_callee3","datasetInfoArray","_context3","map","dsInfo","datasetByNameExists","_x3","_datasetByNameExists","_callee5","allDatasetNames","_context5","getDatasetInfoByName","_x5","_getDatasetInfoByName","_callee7","tResult","_context7","toString","guaranteeTableOrCardIsVisibleFor","_x6","_guaranteeTableOrCardIsVisibleFor","_callee8","iDatasetInfo","cardID","tFoundCard","tableID","tFoundTable","_context8","getComponentByTypeAndTitleOrName","dataContext","_x7","_x8","_x9","_getComponentByTypeAndTitleOrName","_callee9","iType","iTitle","iName","tListResult","tID","tFoundValue","_context9","find","iValue","getParentLevelAttributeNames","_x10","_getParentLevelAttributeNames","_callee10","returnedInfo","collections","parentCollection","_context10","parentCollectionName","attrNames","attrs","attr","numberOfCasesInCollection","_x11","_x12","_numberOfCasesInCollection","_callee11","datasetName","collectionName","_context11","getAllAttributeNames","_x13","_getAllAttributeNames","_callee12","attributeNames","getDatasetResult","_context12","collection","pluginParameters","width","height","collectMeasuresDatasetParams","parentCollectionTitle","childCollectionName","childCollectionTitle","guaranteeMeasuresDataset","_x2","_guaranteeMeasuresDataset","_callee2","entityInfo","params","tCreateResult","theInfo","_context2","createAttributesInCollectedMeasuresDataset","_createAttributesInCollectedMeasuresDataset","theStore","theParams","parentInfo","existingAttrNames","attrsToAdd","chosenDatasetName","chosenParentCollectionName","getCasesResult","measuresCollectedSoFar","items","chosenSourceDataset","filter","includes","iCase","anItem","Sample","dataContextHasRandomFormula","_x4","_dataContextHasRandomFormula","_callee4","foundRandomFormula","dataContextResult","tCollections","_context4","iCollection","iAttr","formula","dataContextHasParentCollection","_dataContextHasParentCollection","foundParentCollection","Store","_classCallCheck","index","availableSourceDatasets","chosenSourceParentCollectionInfo","chosenHasRandomness","chosenHasMeasures","collectMeasuresDataset","numberOfRepetitions","makeAutoObservable","autoBind","_createClass","key","_initialize","_this","_objectSpread","updateSourceDatasets","autorun","checkForRandomnessAndMeasures","_updateSourceDatasets","indexOfChosen","_this2","findIndex","chosenName","_checkForRandomnessAndMeasures","hasRandomness","hasParentCollection","toJS","json","_this3","runInAction","NotificationManager","iStore","store","handleDataContextChange","handleInternalChanges","_handleDataContextChange","_handleInternalChanges","CollectMeasures","observer","_Component","props","_possibleConstructorReturn","_getPrototypeOf","ref","notificationManager","state","hasError","isLoaded","showingInfo","collectionInProgress","React","createRef","restorePluginFromStore","_assertThisInitialized","getPluginStore","_inherits","_componentDidMount","initialize","setState","errorInfo","asJSON","_restorePluginFromStore","iStorage","fromJSON","_rerandomize","rerandomize","_collectMeasuresOnce","_repeatedMeasuresCollection","kickStart","numTimes","collectMeasuresOnce","chosenDataSetTitle","createElement","onClick","disabled","repeatedMeasuresCollection","className","infoPage","FontAwesomeIcon","icon","faCircleInfo","_handleChoice","_callee6","iChoice","_context6","iInfo","iPrompt","iPlaceHolder","iHint","iChoices","iNoDataText","tDatasetChoices","SelectBox","dataSource","placeholder","hint","noDataText","style","display","onValueChange","_ref","datasetMenu","rerandomizeNote","collectMeasuresNote","NumberBox","defaultValue","onValueChanged","getAppropriateButton","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ef198cc.chunk.js","sourcesContent":["// ==========================================================================\n//\n//  Author:   jsandoe\n//\n//  Copyright (c) 2016 by The Concord Consortium, Inc. All rights reserved.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n// ==========================================================================\n\n/**\n * This class is intended to provide an abstraction layer for managing\n * a CODAP Data Interactive's connection with CODAP. It is not required. It is\n * certainly possible for a data interactive, for example, to use only the\n * iFramePhone library, which manages the connection at a lower level.\n *\n * This object provides the following services:\n *   1. Initiates the iFramePhone interaction with CODAP.\n *   2. Provides information on the status of the connection.\n *   3. Provides a sendRequest method. It accepts a callback or returns a Promise\n *      for handling the results from CODAP.\n *   4. Provides a subscriber interface to receive selected notifications from\n *      CODAP.\n *   5. Provides automatic handling of Data Interactive State. Prior to saving\n *      a document CODAP requests state from the Data Interactive, where state\n *      is an arbitrary serializable object containing whatever the data\n *      interactive needs to retain. It returns this state when the document\n *      is reopened.\n *   6. Provides a utility to parse a resource selector into its component parts.\n *\n * @type {Object}\n *\n */\n\nimport { IframePhoneRpcEndpoint } from 'iframe-phone';\n\n/**\n * The CODAP Connection\n */\nvar connection: { call: (arg0: any, arg1: (response: any) => void) => void; } | null = null;\n\nvar connectionState = 'preinit';\n\nvar stats = {\n  countDiReq: 0,\n  countDiRplSuccess: 0,\n  countDiRplFail: 0,\n  countDiRplTimeout: 0,\n  countCodapReq: 0,\n  countCodapUnhandledReq: 0,\n  countCodapRplSuccess: 0,\n  countCodapRplFail: 0,\n  timeDiFirstReq: (null as Date | null),\n  timeDiLastReq: (null as Date | null),\n  timeCodapFirstReq: (null as Date | null),\n  timeCodapLastReq: (null as Date | null)\n};\n\ninterface IConfig {\n  stateHandler?: (arg0: any) => void;\n  customInteractiveStateHandler?: boolean;\n  name?: any;\n  title?: any;\n  version?: any;\n  dimensions?: any;\n  preventBringToFront?: any;\n  preventDataContextReorg?: any;\n}\n\nvar config: IConfig | null = null;\n\n/**\n * A serializable object shared with CODAP. This is saved as a part of the\n * CODAP document. It is intended for the data interactive's use to store\n * any information it may need to reestablish itself when a CODAP document\n * is saved and restored.\n *\n * This object will be initially empty. It will be updated during the process\n * initiated by the init method if CODAP was started from a previously saved\n * document.\n */\nvar interactiveState = {};\n\n/**\n * A list of subscribers to messages from CODAP\n * @param {[{actionSpec: {RegExp}, resourceSpec: {RegExp}, handler: {function}}]}\n */\nvar notificationSubscribers: { actionSpec: string; resourceSpec: any; operation: any; handler: any; }[] = [];\n\nfunction matchResource(resourceName: any, resourceSpec: string) {\n  return resourceSpec === '*' || resourceName.startsWith(resourceSpec);\n}\n\nfunction notificationHandler (request: { action: any; resource: any; values: any; }, callback: (arg0: { success: boolean; }) => void) {\n  var action = request.action;\n  var resource = request.resource;\n  var requestValues = request.values;\n  var returnMessage = {success: true};\n\n  connectionState = 'active';\n  stats.countCodapReq += 1;\n  stats.timeCodapLastReq = new Date();\n  if (!stats.timeCodapFirstReq) {\n    stats.timeCodapFirstReq = stats.timeCodapLastReq;\n  }\n\n  if (action === 'notify' && !Array.isArray(requestValues)) {\n    requestValues = [requestValues];\n  }\n\n  var handled = false;\n  var success = true;\n\n  if ((action === 'get') || (action === 'update')) {\n    // get assumes only one subscriber because it expects only one response.\n    notificationSubscribers.some(function (subscription) {\n      var result = false;\n      try {\n        if ((subscription.actionSpec === action) &&\n            matchResource(resource, subscription.resourceSpec)) {\n          var rtn = subscription.handler(request);\n          if (rtn && rtn.success) { stats.countCodapRplSuccess++; } else{ stats.countCodapRplFail++; }\n          returnMessage = rtn;\n          result = true;\n        }\n      } catch (ex) {\n        // console.log('DI Plugin notification handler exception: ' + ex);\n        result = true;\n      }\n      return result;\n    });\n    if (!handled) {\n      stats.countCodapUnhandledReq++;\n    }\n  } else if (action === 'notify') {\n    requestValues.forEach(function (value: { operation: any; }) {\n      notificationSubscribers.forEach(function (subscription) {\n        // pass this notification to matching subscriptions\n        handled = false;\n        if ((subscription.actionSpec === action) && matchResource(resource,\n                subscription.resourceSpec) && (!subscription.operation ||\n            (subscription.operation === value.operation) && subscription.handler)) {\n          var rtn = subscription.handler(\n              {action: action, resource: resource, values: value});\n          if (rtn && rtn.success) { stats.countCodapRplSuccess++; } else{ stats.countCodapRplFail++; }\n          success = (success && (rtn ? rtn.success : false));\n          handled = true;\n        }\n      });\n      if (!handled) {\n        stats.countCodapUnhandledReq++;\n      }\n    });\n  } else {\n    // console.log(\"DI Plugin received unknown message: \" + JSON.stringify(request));\n  }\n  return callback(returnMessage);\n}\n\nconst codapInterface = {\n  /**\n   * Connection statistics\n   */\n  stats: stats,\n\n  /**\n   * Initialize connection.\n   *\n   * Start connection. Request interactiveFrame to get prior state, if any.\n   * Update interactive frame to set name and dimensions and other configuration\n   * information.\n   *\n   * @param iConfig {object} Configuration. Optional properties: title {string},\n   *                        version {string}, dimensions {object}\n   *\n   * @param iCallback {function(interactiveState)}\n   * @return {Promise} Promise of interactiveState;\n   */\n  init: function (iConfig: IConfig, iCallback?: (arg0: any) => void) {\n    var this_ = this;\n    return new Promise(function (resolve: (arg0: any) => void, reject: { (arg0: string): void; (arg0: any): void; }) {\n      function getFrameRespHandler(resp: { values: { error: any; savedState: any }; success: boolean }[]) {\n        var success = resp && resp[1] && resp[1].success;\n        var receivedFrame = success && resp[1].values;\n        var savedState = receivedFrame && receivedFrame.savedState;\n        this_.updateInteractiveState(savedState);\n        if (success) {\n          // deprecated way of conveying state\n          if (iConfig.stateHandler) {\n            iConfig.stateHandler(savedState);\n          }\n          resolve(savedState);\n        } else {\n          if (!resp) {\n            reject('Connection request to CODAP timed out.');\n          } else {\n            reject(\n                (resp[1] && resp[1].values && resp[1].values.error) ||\n                'unknown failure');\n          }\n        }\n        if (iCallback) {\n          iCallback(savedState);\n        }\n      }\n\n      var getFrameReq = {action: 'get', resource: 'interactiveFrame'};\n      var newFrame = {\n        name: iConfig.name,\n        title: iConfig.title,\n        version: iConfig.version,\n        dimensions: iConfig.dimensions,\n        preventBringToFront: iConfig.preventBringToFront,\n        preventDataContextReorg: iConfig.preventDataContextReorg\n      };\n      var updateFrameReq = {\n        action: 'update',\n        resource: 'interactiveFrame',\n        values: newFrame\n      };\n\n      config = iConfig;\n\n      // initialize connection\n      connection = new IframePhoneRpcEndpoint(\n          notificationHandler, \"data-interactive\", window.parent);\n\n      if (!config.customInteractiveStateHandler) {\n        this_.on('get', 'interactiveState', function () {\n          return ({success: true, values: this_.getInteractiveState()});\n        }.bind(this_));\n      }\n\n      // console.log('sending interactiveState: ' + JSON.stringify(this_.getInteractiveState));\n      // update, then get the interactiveFrame.\n      return this_.sendRequest([updateFrameReq, getFrameReq])\n        .then(getFrameRespHandler as any, reject);\n    }.bind(this));\n  },\n\n  /**\n   * Current known state of the connection\n   */\n  getConnectionState: function () {return connectionState;},\n\n  getStats: function () {\n    return stats;\n  },\n\n  getConfig: function () {\n    return config;\n  },\n\n  /**\n   * Returns the interactive state.\n   *\n   * @returns {object}\n   */\n  getInteractiveState: function () {\n    return interactiveState;\n  },\n\n  /**\n   * Updates the interactive state.\n   * @param iInteractiveState {Object}\n   */\n  updateInteractiveState: function (iInteractiveState: any) {\n    if (!iInteractiveState) {\n      return;\n    }\n    interactiveState = Object.assign(interactiveState, iInteractiveState);\n  },\n\n  destroy: function () {\n    // todo : more to do?\n    connection = null;\n  },\n\n  /**\n   * Sends a request to CODAP. The format of the message is as defined in\n   * {@link https://github.com/concord-consortium/codap/wiki/CODAP-Data-Interactive-API}.\n   *\n   * @param message {String}\n   * @param callback {function(response, request)} Optional callback to handle\n   *    the CODAP response. Note both the response and the initial request will\n   *    sent.\n   *\n   * @return {Promise} The promise of the response from CODAP.\n   */\n  sendRequest: function (message: any, callback?: any) {\n    return new Promise(function (resolve, reject){\n      function handleResponse (request: any, response: {success: boolean} | undefined, callback: (arg0: any, arg1: any) => void) {\n        if (response === undefined) {\n          // console.warn('handleResponse: CODAP request timed out');\n          reject('handleResponse: CODAP request timed out: ' + JSON.stringify(request));\n          stats.countDiRplTimeout++;\n        } else {\n          connectionState = 'active';\n          if (response.success) { stats.countDiRplSuccess++; } else { stats.countDiRplFail++; }\n          resolve(response);\n        }\n        if (callback) {\n          callback(response, request);\n        }\n      }\n      switch (connectionState) {\n        case 'closed': // log the message and ignore\n          // console.warn('sendRequest on closed CODAP connection: ' + JSON.stringify(message));\n          reject('sendRequest on closed CODAP connection: ' + JSON.stringify(message));\n          break;\n        case 'preinit': // warn, but issue request.\n          // console.log('sendRequest on not yet initialized CODAP connection: ' +\n              // JSON.stringify(message));\n          /* falls through */\n        default:\n          if (connection) {\n            stats.countDiReq++;\n            stats.timeDiLastReq = new Date();\n            if (!stats.timeDiFirstReq) {\n              stats.timeCodapFirstReq = stats.timeDiLastReq;\n            }\n\n            connection.call(message, function (response: any) {\n              handleResponse(message, response, callback);\n            });\n          } else {\n            // console.error('sendRequest on non-existent CODAP connection');\n          }\n      }\n    });\n  },\n\n  /**\n   * Registers a handler to respond to CODAP-initiated requests and\n   * notifications. See {@link https://github.com/concord-consortium/codap/wiki/CODAP-Data-Interactive-API#codap-initiated-actions}\n   *\n   * @param actionSpec {'get' || 'notify'} (optional) Action to handle. Defaults to 'notify'.\n   * @param resourceSpec {String} A resource string.\n   * @param operation {String} (optional) name of operation, e.g. 'create', 'delete',\n   *   'move', 'resize', .... If not specified, all operations will be reported.\n   * @param handler {Function} A handler to receive the notifications.\n   */\n  on: function (actionSpec: string, resourceSpec: string, operation: string | (() => void), handler?: (...args:any) => void) {\n    var as = 'notify',\n        rs,\n        os,\n        hn;\n    var args = Array.prototype.slice.call(arguments);\n    if (['get', 'update', 'notify'].indexOf(args[0]) >= 0) {\n      as = args.shift();\n    }\n    rs = args.shift();\n    if (typeof args[0] !== 'function') {\n      os = args.shift();\n    }\n    hn = args.shift();\n\n    const subscriber = {\n      actionSpec: as,\n      resourceSpec: rs,\n      operation: os,\n      handler: hn\n    };\n\n    notificationSubscribers.push(subscriber);\n  },\n\n  /**\n   * Parses a resource selector returning a hash of named resource names to\n   * resource values. The last clause is identified as the resource type.\n   * E.g. converts 'dataContext[abc].collection[def].case'\n   * to {dataContext: 'abc', collection: 'def', type: 'case'}\n   *\n   * @param {String} iResource\n   * @return {Object}\n   */\n  parseResourceSelector: function (iResource: string) {\n    var selectorRE = /([A-Za-z0-9_-]+)\\[([^\\]]+)]/;\n    var result: any = {};\n    var selectors = iResource.split('.');\n    selectors.forEach(function (selector: string) {\n      var resourceType, resourceName;\n      var match = selectorRE.exec(selector);\n      if (selectorRE.test(selector) && match) {\n        resourceType = match[1];\n        resourceName = match[2];\n        result[resourceType] = resourceName;\n        result.type = resourceType;\n      } else {\n        result.type = selector;\n      }\n    });\n\n    return result;\n  }\n};\n\nexport default codapInterface;","import codapInterface from \"./CodapInterface\";\n\nexport interface EntityInfo {\n  name: string,\n  title: string,\n  id: number\n}\nexport const kEmptyEntityInfo = {name: '', title: '', id: 0}\n\nexport function initializePlugin(pluginName: string, version: string, dimensions: { width: number, height: number },\n                                 iRestoreStateHandler: (arg0: any) => void) {\n  const interfaceConfig = {\n    name: pluginName,\n    version: version,\n    dimensions: dimensions,\n    preventDataContextReorg: false,\n    preventBringToFront: true,\n    cannotClose: true\n  };\n  return codapInterface.init(interfaceConfig, iRestoreStateHandler);\n}\n\nexport const dataSetString = (contextName: string) => `dataContext[${contextName}]`;\n\n/**\n * Return the names of datasets that pass the given filter\n * @param iFilter\n */\nexport async function getDatasetInfoWithFilter(iFilter: (value: any) => boolean): Promise<EntityInfo[]> {\n  const tDatasetInfoArray: EntityInfo[] = [],\n    tContextListResult: any = await codapInterface.sendRequest({\n      \"action\": \"get\",\n      \"resource\": \"dataContextList\"\n    }).catch((reason) => {\n      console.log('unable to get datacontext list because ' + reason);\n    });\n  if (!(tContextListResult && tContextListResult.success))\n    return []\n  else {\n    for (let tIndex = 0; tIndex < tContextListResult.values.length; tIndex++) {\n      let aValue = tContextListResult.values[tIndex]\n      if (iFilter(aValue))\n        tDatasetInfoArray.push(\n          {\n            title: aValue.title,\n            name: aValue.name,\n            id: aValue.id,\n          });\n    }\n  }\n  return tDatasetInfoArray\n}\n\nexport async function getAllDatasetIds() {\n  const datasetInfoArray = await getDatasetInfoWithFilter(() => true)\n  return datasetInfoArray.map((dsInfo) => dsInfo.id)\n}\n\nexport async function getAllDatasetNames() {\n  const datasetInfoArray = await getDatasetInfoWithFilter(() => true)\n  return datasetInfoArray.map((dsInfo) => dsInfo.name)\n}\n\nexport async function datasetByIdExists(id: number) {\n  const allDatasetNames = await getAllDatasetIds()\n  return allDatasetNames.indexOf(id) >= 0\n}\n\nexport async function datasetByNameExists(name: string) {\n  const allDatasetNames = await getAllDatasetNames()\n  return allDatasetNames.indexOf(name) >= 0\n}\n\nexport async function getDatasetInfoById(id: number): Promise<any> {\n  const tResult: any = await codapInterface.sendRequest({\n    \"action\": \"get\",\n    \"resource\": dataSetString(id.toString())\n  }).catch((reason) => {\n    console.log('unable to get datacontext ' + reason);\n  });\n  if (!(tResult && tResult.success)) {\n    return null\n  }\n  return tResult.values\n}\n\nexport async function getDatasetInfoByName(name: string): Promise<any> {\n  const tResult: any = await codapInterface.sendRequest({\n    \"action\": \"get\",\n    \"resource\": dataSetString(name.toString())\n  }).catch((reason) => {\n    console.log('unable to get datacontext ' + reason);\n  });\n  if (!(tResult && tResult.success)) {\n    return null\n  }\n  return tResult.values\n}\n\n/**\n * Find the case table or case card corresponding to the given dataset\n * @param iDatasetInfo\n */\nexport async function guaranteeTableOrCardIsVisibleFor(iDatasetInfo: EntityInfo) {\n  if (iDatasetInfo.name !== '' && iDatasetInfo.title !== '') {\n    const cardID = await getComponentByTypeAndTitleOrName(\n      'caseCard', iDatasetInfo.title, iDatasetInfo.name),\n      tFoundCard = cardID >= 0,\n      tableID = await getComponentByTypeAndTitleOrName(\n        'caseTable', iDatasetInfo.title, iDatasetInfo.name),\n      tFoundTable = tableID >= 0\n    if (!(tFoundCard || tFoundTable)) {\n      await codapInterface.sendRequest({\n        action: 'create',\n        resource: `component`,\n        values: {\n          type: 'caseTable',\n          name: iDatasetInfo.name,\n          title: iDatasetInfo.title,\n          dataContext: iDatasetInfo.name\n        }\n      })\n    }\n  }\n}\n\nexport async function getComponentByTypeAndTitleOrName(iType: string, iTitle: string, iName:string): Promise<number> {\n  const tListResult: any = await codapInterface.sendRequest(\n    {\n      action: 'get',\n      resource: `componentList`\n    }\n  )\n    .catch(() => {\n      console.log('Error getting component list')\n    });\n  // console.log(`tListResult = ${JSON.stringify(tListResult)}`)\n  let tID = -1;\n  if (tListResult.success) {\n    let tFoundValue = tListResult.values.find((iValue: any) => {\n      return iValue.type === iType && (iValue.title === iTitle || iValue.name === iName);\n    });\n    if (tFoundValue)\n      tID = tFoundValue.id;\n  }\n  return tID;\n}\n\nexport async function getParentLevelAttributeNames(iDatasetInfo: EntityInfo): Promise<any> {\n  const returnedInfo:{parentCollectionName:string, attrNames:string[]} = { parentCollectionName: '', attrNames: []},\n    tResult: any = await codapInterface.sendRequest({\n    \"action\": \"get\",\n    \"resource\": dataSetString(iDatasetInfo.name)\n  }).catch((reason) => {\n    console.log('unable to get datacontext ' + reason);\n  })\n  if (tResult && tResult.success) {\n    const collections = tResult.values.collections\n    if (collections.length > 1) {\n      const parentCollection = collections[0]\n      returnedInfo.parentCollectionName = parentCollection.name\n      parentCollection.attrs.forEach((attr: any) => {\n        returnedInfo.attrNames.push(attr.name)\n      })\n    }\n  }\n  return returnedInfo\n}\n\nexport async function numberOfCasesInCollection(datasetName:string, collectionName:string): Promise<number> {\n  const tResult: any = await codapInterface.sendRequest({\n    \"action\": \"get\",\n    \"resource\": `${dataSetString(datasetName)}.collection[${collectionName}].caseCount`\n  }).catch((reason) => {\n    console.log('unable to get datacontext ' + reason);\n  })\n  if (tResult && tResult.success) {\n    return tResult.values\n  }\n  return 0\n}\n\nexport async function getAllAttributeNames(datasetName:string): Promise<string[]> {\n  const attributeNames:string[] = []\n  const getDatasetResult: any = await codapInterface.sendRequest({\n    \"action\": \"get\",\n    \"resource\": dataSetString(datasetName)\n  }).catch((reason) => {\n    console.log('unable to get datacontext ' + reason);\n  })\n  if (getDatasetResult && getDatasetResult.success) {\n    const collections = getDatasetResult.values.collections\n    collections.forEach((collection: any) => {\n      collection.attrs.forEach((attr: any) => {\n        attributeNames.push(attr.name)\n      })\n    })\n  }\n  return attributeNames\n}","export const pluginParameters = {\n  name: 'Collect Measures',\n  version: '0.1',\n  initialDimensions: {\n    width: 280,\n    height: 385\n  }\n}\n\nexport const collectMeasuresDatasetParams = {\n  name: 'Collected Measures',\n  title: 'Collected Measures',\n  parentCollectionName: 'Samples',\n  parentCollectionTitle: 'Samples',\n  childCollectionName: 'Measures',\n  childCollectionTitle: 'Measures',\n}\n\n","/**\n * These utilities might be used by more than one component\n */\n\nimport React from \"react\";\nimport {SelectBox} from \"devextreme-react/select-box\";\nimport {action} from \"mobx\";\nimport codapInterface from \"./lib/CodapInterface\";\nimport {collectMeasuresDatasetParams} from \"./types-and-constants\";\nimport {\n  datasetByNameExists,\n  EntityInfo, getAllAttributeNames, getAllDatasetNames,\n  getDatasetInfoByName, getParentLevelAttributeNames,\n  guaranteeTableOrCardIsVisibleFor, numberOfCasesInCollection\n} from \"./lib/codap-helper\";\nimport {Store} from \"./store\";\n\nexport function choicesMenu(iPrompt: string, iPlaceHolder: string, iHint: string,\n                            iChoices: string[], iValue: string, iNoDataText: string, iCallback: (choice: string) => void) {\n  return (\n    <div className='sq-choice'>\n      <span>{iPrompt}:</span>\n      <SelectBox\n        dataSource={iChoices}\n        placeholder={iPlaceHolder}\n        hint={iHint}\n        value={iValue}\n        noDataText={iNoDataText}\n        style={{display: 'inline-block'}}\n        onValueChange={action(async (e) => iCallback(e))}\n        width={'100%'}\n      >\n      </SelectBox>\n    </div>\n  )\n}\n\n/**\n * First make sure there is a \"Collected Measures\" dataset. If not, create one.\n * Gather the names of the attributes at the parent level in the chosen dataset.\n * Make sure these attribute names are present at the child level of the \"Collected Measures\" dataset.\n * If the parent level of the chosen dataset has multiple cases, make sure there is a parent collection\n * in the \"Collected Measures\" dataset with the attribute \"Sample\".\n * @return {Promise<boolean>}\n */\nexport async function guaranteeMeasuresDataset(entityInfo: EntityInfo): Promise<void> {\n  const params = collectMeasuresDatasetParams,\n    alreadyExists = await datasetByNameExists(params.name)\n  if (!alreadyExists) {\n    const tCreateResult: any = await codapInterface.sendRequest({\n      action: 'create',\n      resource: 'dataContext',\n      values: {\n        name: params.name,\n        title: params.title,\n        collections: [\n          {\n            name: params.childCollectionName,\n            title: params.childCollectionTitle,\n            attrs: []\n          },\n          {\n            name: params.parentCollectionName,\n            title: params.parentCollectionTitle,\n            attrs: [\n              {name: 'Sample', title: 'Sample'},\n            ]\n          }]\n      }\n    }).catch((reason) => {\n      console.log('unable to create datacontext ' + reason);\n    })\n    if (tCreateResult && tCreateResult.success) {\n      entityInfo.id = tCreateResult.values.id\n      entityInfo.name = tCreateResult.values.name\n      entityInfo.title = tCreateResult.values.title\n    }\n  }\n  if (!entityInfo.id) {\n    const theInfo = await getDatasetInfoByName(params.name)\n    if (theInfo) {\n      entityInfo.id = theInfo.id\n      entityInfo.name = theInfo.name\n      entityInfo.title = theInfo.title\n    }\n  }\n  guaranteeTableOrCardIsVisibleFor(entityInfo)\n}\n\nexport async function createAttributesInCollectedMeasuresDataset(theStore: Store) {\n  const theParams = collectMeasuresDatasetParams,\n    parentInfo = await getParentLevelAttributeNames(theStore.chosenSourceDataset as EntityInfo),\n    existingAttrNames = await getAllAttributeNames(theParams.name),\n    attrsToAdd = parentInfo.attrNames.filter((iName: string) => {\n      return !existingAttrNames.includes(iName)\n    })\n  if (attrsToAdd.length > 0) {\n    const createAttrsResult: any = await codapInterface.sendRequest({\n        action: 'create',\n        resource: `dataContext[${theParams.name}].collection[${theParams.childCollectionName}].attribute`,\n        values: attrsToAdd.map((iName: string) => {\n          return {name: iName}\n        })\n      }\n    ).catch((reason) => {\n      console.log('unable to create attributes because ' + reason);\n    })\n  }\n  const chosenDatasetName = theStore.chosenSourceDataset ? theStore.chosenSourceDataset.name : '',\n    chosenParentCollectionName = parentInfo.parentCollectionName\n  const getCasesResult: any = await codapInterface.sendRequest({\n    action: 'get',\n    resource: `dataContext[${chosenDatasetName}].collection[${chosenParentCollectionName}].caseFormulaSearch[true]`\n  }).catch((reason) => {\n    console.log('unable to get case because ' + reason);\n  })\n  if (getCasesResult && getCasesResult.success) {\n    const measuresCollectedSoFar = await numberOfCasesInCollection(\n        theParams.name, theParams.parentCollectionName),\n      items = getCasesResult.values.map((iCase: any) => {\n        const anItem = iCase.values\n        anItem.Sample = measuresCollectedSoFar + 1\n        return anItem\n      })\n    const createCaseResult = await codapInterface.sendRequest({\n      action: 'create',\n      resource: `dataContext[${theParams.name}].item`,\n      values: items\n    }).catch((reason) => {\n      console.log('unable to create case because ' + reason);\n    })\n  }\n}\n\nexport async function dataContextHasRandomFormula(name: string): Promise<boolean> {\n  let foundRandomFormula = false\n  const dataContextResult: any = await codapInterface.sendRequest({\n    action: 'get',\n    resource: `dataContext[${name}]`\n  }).catch((reason) => {\n    console.log('unable to get data context because ' + reason);\n  })\n  if (dataContextResult && dataContextResult.success) {\n    const tCollections = dataContextResult.values.collections\n    if (tCollections) {\n      tCollections.forEach((iCollection: any) => {\n        if (iCollection.attrs) {\n          iCollection.attrs.forEach((iAttr: any) => {\n            if (iAttr.formula && iAttr.formula.includes('random')) {\n              foundRandomFormula = true\n            }\n          })\n        }\n      })\n    }\n  }\n  return foundRandomFormula\n}\n\nexport async function dataContextHasParentCollection(name: string): Promise<boolean> {\n  let foundParentCollection = false\n  const dataContextResult: any = await codapInterface.sendRequest({\n    action: 'get',\n    resource: `dataContext[${name}]`\n  }).catch((reason) => {\n    console.log('unable to get data context because ' + reason);\n  })\n  if (dataContextResult && dataContextResult.success) {\n    const tCollections = dataContextResult.values.collections\n    foundParentCollection = tCollections && tCollections.length > 1\n  }\n  return foundParentCollection\n}\n","/**\n * These store objects are meant to keep track of all the state need by classes and components that needs to\n * be accessed in more than one file or needs to be saved and restored.\n */\nimport {action, autorun, makeAutoObservable, runInAction, toJS} from 'mobx'\nimport {EntityInfo, getDatasetInfoWithFilter, kEmptyEntityInfo} from \"./lib/codap-helper\";\nimport {collectMeasuresDatasetParams} from \"./types-and-constants\";\nimport {dataContextHasParentCollection, dataContextHasRandomFormula} from \"./utilities\";\n\nexport interface CollectionInfo {\n  name: string,\n  title: string,\n  attrNames: string[]\n}\n\nexport class Store {\n  index: string = ''\n\n  availableSourceDatasets: EntityInfo[] = []\n  chosenSourceDataset: EntityInfo | undefined = undefined\n  chosenSourceParentCollectionInfo: CollectionInfo | undefined = undefined\n  chosenHasRandomness: boolean = false\n  chosenHasMeasures: boolean = false\n  collectMeasuresDataset: EntityInfo | undefined = undefined\n  numberOfRepetitions = 10\n\n  constructor() {\n    makeAutoObservable(this,\n      {},\n      {autoBind: true})\n  }\n\n  async initialize() {\n    const this_ = this\n\n    if (!this.collectMeasuresDataset) {\n      this.collectMeasuresDataset = {... kEmptyEntityInfo}\n    }\n    await this.updateSourceDatasets()\n\n    autorun(async () => {\n      if (this.chosenSourceDataset) {\n        await this.checkForRandomnessAndMeasures()\n      }\n    })\n  }\n\n  async updateSourceDatasets() {\n    this.availableSourceDatasets = await getDatasetInfoWithFilter(\n      (dsInfo: EntityInfo) => {\n        return dsInfo.name !== collectMeasuresDatasetParams.name\n      });\n    if (this.chosenSourceDataset) {\n      const indexOfChosen = this.availableSourceDatasets.findIndex(\n        (dsInfo) => {\n          const chosenName = this.chosenSourceDataset && this.chosenSourceDataset.name\n          return dsInfo.name === chosenName\n        })\n      if (indexOfChosen < 0) {\n        action(() => this.chosenSourceDataset = undefined)()\n      }\n      else {\n        action(() => this.chosenSourceDataset = this.availableSourceDatasets[indexOfChosen])()\n      }\n    }\n    if(!this.chosenSourceDataset && this.availableSourceDatasets.length > 0) {\n      action(() => this.chosenSourceDataset = this.availableSourceDatasets[0])()\n    }\n  }\n\n  async checkForRandomnessAndMeasures() {\n    const this_ = this\n    const name = this_.chosenSourceDataset && this_.chosenSourceDataset.name\n    if (name) {\n      const hasRandomness = await dataContextHasRandomFormula(name)\n      const hasParentCollection = await dataContextHasParentCollection(name)\n      action(() => this_.chosenHasRandomness = hasRandomness)()\n      action(() => this_.chosenHasMeasures = hasParentCollection)()\n    }\n  }\n\n  asJSON() {\n    return {\n      chosenSourceDataset: toJS(this.chosenSourceDataset),\n      collectMeasuresDataset: toJS(this.collectMeasuresDataset),\n      numberOfRepetitions: this.numberOfRepetitions\n    }\n  }\n\n  fromJSON(json: any) {\n    if (json) {\n      runInAction(() => {\n        this.chosenSourceDataset = json.chosenSourceDataset\n        this.collectMeasuresDataset = json.collectMeasuresDataset\n        this.numberOfRepetitions = json.numberOfRepetitions\n      })\n    }\n  }\n\n}\n\n\n","/**\n * The NotificationManager is created at startup and handles notifications from CODAP that must be received and\n * handled regardless of which components have been created and initialized.\n */\nimport {Store} from \"./store\";\nimport codapInterface from \"./lib/CodapInterface\";\nimport {action} from \"mobx\";\n\nexport default class NotificationManager {\n\n  store: Store\n\n  constructor(iStore: Store) {\n    this.store = iStore;\n    this.handleDataContextChange = this.handleDataContextChange.bind(this)\n    this.handleInternalChanges = this.handleInternalChanges.bind(this)\n    codapInterface.on('notify', '*', 'dataContextCountChanged', this.handleDataContextChange);\n    codapInterface.on('notify', '*', 'titleChange', this.handleDataContextChange);\n    codapInterface.on('notify', '*', 'edit formula', this.handleInternalChanges);\n    codapInterface.on('notify', '*', 'updateAttributes', this.handleInternalChanges);\n    codapInterface.on('notify', '*', 'updateCases', this.handleInternalChanges);\n    codapInterface.on('notify', '*', 'dependentCases', this.handleInternalChanges);\n    codapInterface.on('notify', '*', 'createCollection', this.handleInternalChanges);\n    codapInterface.on('notify', '*', 'deleteCollection', this.handleInternalChanges);\n  }\n\n  async handleDataContextChange(/*iNotification: CODAP_Notification*/) {\n    action(async () => {\n      await this.store.updateSourceDatasets()\n    })()\n  }\n\n  async handleInternalChanges(/*iNotification: CODAP_Notification*/) {\n    action(async () => {\n      await this.store.checkForRandomnessAndMeasures()\n    })()\n  }\n\n}\n\n","// ==========================================================================\n//\n//  Author:   wfinzer\n//\n//  Copyright (c) 2021 by The Concord Consortium, Inc. All rights reserved.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n// ==========================================================================\n\nimport React, {Component, ErrorInfo} from 'react';\nimport {action} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport codapInterface from \"./lib/CodapInterface\";\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.compact.css';\nimport {dataSetString, EntityInfo, initializePlugin} from './lib/codap-helper';\nimport {pluginParameters} from \"./types-and-constants\";\nimport {choicesMenu, createAttributesInCollectedMeasuresDataset, guaranteeMeasuresDataset} from \"./utilities\";\nimport './collect-measures.css';\nimport {Store} from \"./store\";\nimport {NumberBox} from \"devextreme-react\";\nimport NotificationManager from \"./notification_manager\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircleInfo, faEnvelope} from '@fortawesome/free-solid-svg-icons'\n\nconst CollectMeasures = observer(class CollectMeasures extends Component<{}, {\n  hasError: boolean,\n  isLoaded: boolean,\n  showingInfo: boolean,\n  collectionInProgress: boolean,\n}> {\n  ref: React.RefObject<unknown>\n  store: Store\n  notificationManager: NotificationManager\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      hasError: false,\n      isLoaded: false,\n      showingInfo: false,\n      collectionInProgress: false,\n    }\n    this.ref = React.createRef();\n    this.store = new Store()\n    this.notificationManager = new NotificationManager(this.store)\n    this.restorePluginFromStore = this.restorePluginFromStore.bind(this);\n    this.getPluginStore = this.getPluginStore.bind(this);\n    codapInterface.on('update', 'interactiveState', '', this.restorePluginFromStore);\n    codapInterface.on('get', 'interactiveState', '', this.getPluginStore);\n  }\n\n  async componentDidMount() {\n    await initializePlugin(pluginParameters.name,\n      pluginParameters.version, pluginParameters.initialDimensions,\n      this.restorePluginFromStore);\n    await this.store.initialize()\n    this.setState({isLoaded: true})\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // You can also log the error to an error reporting service\n    console.log(error, errorInfo);\n  }\n\n  getPluginStore() {\n    return {\n      success: true,\n      values: {\n        store: this.store.asJSON(),\n      }\n    };\n  }\n\n  async restorePluginFromStore(iStorage: any) {\n    if (iStorage) {\n      this.store.fromJSON(iStorage.store);\n    }\n  }\n\n  async rerandomize() {\n    if (this.store.chosenSourceDataset) {\n      await codapInterface.sendRequest({\n        \"action\": \"update\",\n        \"resource\": dataSetString(this.store.chosenSourceDataset.name || ''),\n        \"values\": {\n          \"rerandomize\": true\n        }\n      }).catch((reason) => {\n        console.log('unable to rerandomize because ' + reason);\n      });\n    }\n  }\n\n  async collectMeasuresOnce() {\n    await guaranteeMeasuresDataset(this.store.collectMeasuresDataset as EntityInfo)\n    await createAttributesInCollectedMeasuresDataset(this.store)\n  }\n\n  async repeatedMeasuresCollection() {\n    this.setState({collectionInProgress: true})\n    let kickStart = true\n    let numTimes = this.store.numberOfRepetitions\n    while (numTimes > 0 && (this.state.collectionInProgress || kickStart)) {\n      kickStart = false\n      await this.rerandomize()\n      await this.collectMeasuresOnce()\n      numTimes--\n    }\n    this.setState({collectionInProgress: false})\n  }\n\n  getAppropriateButton() {\n    const this_ = this,\n      store = this.store,\n      chosenDataSetTitle = store.chosenSourceDataset ? store.chosenSourceDataset.title : ''\n    if (this.state.collectionInProgress) {\n      return <button onClick={() => {\n        this_.setState({collectionInProgress: false})\n      }}>\n        Stop Collecting Measures\n      </button>\n    } else {\n      return <button\n        disabled={!store.chosenHasRandomness || !store.chosenHasMeasures}\n        onClick={() => {\n          this_.repeatedMeasuresCollection()\n        }}>\n        {`Re-randomize and Collect Measures ${store.numberOfRepetitions} Times from ${chosenDataSetTitle}`}\n      </button>\n    }\n  }\n\n  rerandomizeNote() {\n    if (!this.store.chosenSourceDataset) {\n      return <p className='note'>No dataset chosen</p>\n    } else if (!this.store.chosenHasRandomness) {\n      return <p className='note'>Nothing in dataset to randomize</p>\n    } else {\n      return null\n    }\n  }\n\n  collectMeasuresNote() {\n    if (!this.store.chosenSourceDataset) {\n      return <p className='note'>No dataset chosen</p>\n    } else if (!this.store.chosenHasMeasures) {\n      return <p className='note'>No measures in dataset to collect</p>\n    } else {\n      return null\n    }\n  }\n\n  infoPage() {\n    return (\n      <div className='cm-info'>\n        <h3>About Collect Measures</h3>\n        <p>This plugin is useful for creating certain classes of simulations in CODAP.</p>\n        <ul>\n          <li>There is a dataset with attributes with formulas using random functions.\n          </li>\n          <li>The dataset has two collections.\n          </li>\n          <li>The collection on the left has attributes that compute \"measures\" from the cases in the\n            collection on the right.</li>\n        </ul>\n        <p><b>Example</b>: The collection on the right has 10 cases and one attribute, <b>Face</b>, whose\n          formula is <code>randomPick(1,2,3,4,5,6)</code>.\n          The collection on the left has one attribute, \"Sum\", with the formula <code>sum(Face)</code>.\n          The plugin collects the sum of the faces of the 10 dice to build up the distribution of sums.\n        </p>\n        <button onClick={() => this.setState({showingInfo: false})}>Back</button>\n      </div>\n    )\n  }\n\n  render() {\n    const this_ = this,\n      store = this.store,\n      chosenDataSetTitle = store.chosenSourceDataset ? store.chosenSourceDataset.title : ''\n\n    function datasetMenu() {\n\n      async function handleChoice(iChoice: string) {\n        store.chosenSourceDataset = store.availableSourceDatasets.find(iInfo => iInfo.title === iChoice)\n      }\n\n      const tDatasetChoices: string[] = (store.availableSourceDatasets.map(iInfo => iInfo.title)),\n        tPrompt = 'Choose a dataset',\n        tHint = 'Choose a dataset to be rerandomized and whose measures will be collected'\n      return (\n        choicesMenu(tPrompt, 'Choose from',\n          tHint, tDatasetChoices, chosenDataSetTitle, 'No datasets to choose from', handleChoice)\n      )\n    }\n\n    if (this.state.hasError) {\n      return <h1>Something went wrong!</h1>\n/*\n    } else if (!this.state.isLoaded) {\n      return <h1>Loading...</h1>\n*/\n    } else if (this.state.showingInfo) {\n      return (\n        <div>\n          {this.infoPage()}\n        </div>\n      )\n    }\n    return (\n      <div className=\"collect-measures\">\n        <div className='cm-header'>\n          <div className='cm-title-with-icon'>\n            <h2>Collect Measures</h2>\n            <div className='cm-info-icon' onClick={() => this_.setState({showingInfo: true})}>\n              <FontAwesomeIcon icon={faCircleInfo}\n                               title='Click to get information on how to use this plugin'/>\n            </div>\n          </div>\n          <p>Choose a dataset, typically one that has attributes with formulas that produce random values.</p>\n        </div>\n        {datasetMenu()}\n        <div className='cm-two-buttons'>\n          <div>\n            <button\n              disabled={!store.chosenHasRandomness}\n              onClick={() => {\n                this_.rerandomize()\n              }}>\n              {`Re-randomize ${chosenDataSetTitle}`}\n            </button>\n            {this.rerandomizeNote()}\n          </div>\n          <div>\n            <button\n              disabled={!store.chosenHasMeasures}\n              onClick={() => {\n                this_.collectMeasuresOnce()\n              }}>\n              {`Collect Measures Once from ${chosenDataSetTitle}`}\n            </button>\n            {this.collectMeasuresNote()}\n          </div>\n        </div>\n        <div className='cm-number-box'>\n          <span>Number of repetitions</span>\n          <NumberBox\n            height={25}\n            width={50}\n            defaultValue={store.numberOfRepetitions}\n            onValueChanged={async (e) => {\n              action(() => {\n                store.numberOfRepetitions = e.value\n              })()\n            }}\n          />\n        </div>\n        {this.getAppropriateButton()}\n      </div>\n    );\n  }\n\n})\n\nexport default CollectMeasures;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CollectMeasures from './collect-measures';\n\nReactDOM.render(<CollectMeasures />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}