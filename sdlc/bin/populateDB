#!/usr/bin/env node
// ==========================================================================
//  
//  Author:   jsandoe
//
//  Copyright (c) 2018 by The Concord Consortium, Inc. All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// ==========================================================================
/**
 * Node program to populate the SDLC database with data
 */
const fs = require('fs');
const console = require('console');
const readline = require('readline');
const xml2js = require('xml-js');

function getDataDictionary (codebook) {
  const kSpecialNumeric = ['FAMSIZE', 'AGE'];
  let tCbkObject = xml2js.xml2js(codebook, {}),
      tDescriptions = tCbkObject.elements[1].elements[3];
  return tDescriptions.elements.map(function (iDesc) {
    let tCats = {};
    iDesc.elements.forEach(function (iElement) {
      if (iElement.name === 'catgry') {
        let key = Number(iElement.elements[0].elements[0].text);
        tCats[key] = iElement.elements[1].elements[0].text;
      }
    });
    return {
      name: iDesc.attributes.name,
      startPos: iDesc.elements[0].attributes.StartPos,
      width: Number(iDesc.elements[0].attributes.width),
      labl: iDesc.elements[1].elements[0].text,
      description: iDesc.elements[2].elements[0].cdata,
      format: (Object.keys(tCats).length === 0 || kSpecialNumeric.indexOf(
          iDesc.attributes.name) >= 0) ? 'numeric' : 'categorical',
      categories: tCats
    }
  });
}

function readAttribute(line, name) {
  let def = dataDictionary.find(function (entr) {return entr.name === name;});
  if (def) {
    let start = def.startPos - 1;
    return line.slice(start, start + def.width);
  }
}


let filename = process.argv[2] || 'data/usa.dat';
let codebookName = process.argv[3] || 'data/codebook.xml';
let codebook = fs.readFileSync(codebookName, {encoding: 'utf8'});
let dataDictionary = getDataDictionary(codebook);
let writeStream = fs.createWriteStream('out.sql');
let insertPrefix = 'insert into peeps (year, state_code, perwt, accum_yr, ' +
      'accum_yr_st, sample_data) values ';
let accum_yr = {};
let accum_yr_st = {};
writeStream.write('delete from peeps;\n');
let lineReader = readline.createInterface({
  input: fs.createReadStream(filename)
});

lineReader.on('line', function (line){
  if (line.length > 0) {
    // let sep = isFirst? '': ',\n';
    // isFirst = false;
    let year = Number(readAttribute(line,'YEAR'));
    let state = Number(readAttribute(line, 'STATEFIP'));
    let weight = Number(readAttribute(line, 'PERWT'))/100;
    if (accum_yr[year] === undefined) {
      accum_yr[year] = 0;
      accum_yr_st[year] = {};
    }
    if (accum_yr_st[year][state] === undefined) {
      accum_yr_st[year][state] = 0;
    }
    
    writeStream.write(insertPrefix + '(' + [year, state, weight.toFixed(), 
      accum_yr[year].toFixed(), accum_yr_st[year][state].toFixed(), '\'' + line + '\''].join() +
       ');\n');

    accum_yr[year] += weight;
    accum_yr_st[year][state] += weight;
  }
});
lineReader.on('close', function () {
  Object.keys(accum_yr).forEach(function (yr) {
    let sum = accum_yr[yr];
    writeStream.write('insert into stats (year, state_code, sum_weights) values (' +
        yr + ', null, ' + sum + ');\n');
    let stateSums = accum_yr_st[yr];
    Object.keys(stateSums).forEach(function (st) {
      sum = stateSums[st];
      writeStream.write('insert into stats (year, state_code, sum_weights) values (' +
          yr + ',' + st + ',' + sum + ');\n');
    });
  });
});
